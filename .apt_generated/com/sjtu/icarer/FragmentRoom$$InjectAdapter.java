// Code generated by dagger-compiler.  Do not edit.
package com.sjtu.icarer;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<FragmentRoom>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code FragmentRoom} and its
 * dependencies.
 *
 * Being a {@code Provider<FragmentRoom>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<FragmentRoom>} and handling injection
 * of annotated fields.
 */
public final class FragmentRoom$$InjectAdapter extends Binding<FragmentRoom>
    implements Provider<FragmentRoom>, MembersInjector<FragmentRoom> {
  private Binding<com.sjtu.icarer.service.IcarerService> icarerService;

  public FragmentRoom$$InjectAdapter() {
    super("com.sjtu.icarer.FragmentRoom", "members/com.sjtu.icarer.FragmentRoom", NOT_SINGLETON, FragmentRoom.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    icarerService = (Binding<com.sjtu.icarer.service.IcarerService>) linker.requestBinding("com.sjtu.icarer.service.IcarerService", FragmentRoom.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(icarerService);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<FragmentRoom>}.
   */
  @Override
  public FragmentRoom get() {
    FragmentRoom result = new FragmentRoom();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<FragmentRoom>}.
   */
  @Override
  public void injectMembers(FragmentRoom object) {
    object.icarerService = icarerService.get();
  }

}
