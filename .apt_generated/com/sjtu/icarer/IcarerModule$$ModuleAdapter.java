// Code generated by dagger-compiler.  Do not edit.
package com.sjtu.icarer;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class IcarerModule$$ModuleAdapter extends ModuleAdapter<IcarerModule> {
  private static final String[] INJECTS = { "members/com.sjtu.icarer.core.IcarerApplication", "members/com.sjtu.icarer.HomeActivity", "members/com.sjtu.icarer.FragmentRoom", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public IcarerModule$$ModuleAdapter() {
    super(com.sjtu.icarer.IcarerModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public IcarerModule newModule() {
    return new com.sjtu.icarer.IcarerModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, IcarerModule module) {
    bindings.contributeProvidesBinding("com.sjtu.icarer.service.IcarerService", new ProvideIcarerServiceProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.squareup.otto.Bus", new ProvideOttoBusProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.sjtu.icarer.core.web.RestAdapterRequestInterceptor", new ProvideRestAdapterRequestInterceptorProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.google.gson.Gson", new ProvideGsonProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.sjtu.icarer.core.web.RestErrorHandler", new ProvideRestErrorHandlerProvidesAdapter(module));
    bindings.contributeProvidesBinding("retrofit.RestAdapter", new ProvideRestAdapterProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.sjtu.icarer.service.IcarerService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.sjtu.icarer.service.IcarerService} and its
   * dependencies.
   *
   * Being a {@code Provider<com.sjtu.icarer.service.IcarerService>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideIcarerServiceProvidesAdapter extends ProvidesBinding<com.sjtu.icarer.service.IcarerService>
      implements Provider<com.sjtu.icarer.service.IcarerService> {
    private final IcarerModule module;
    private Binding<retrofit.RestAdapter> restAdapter;

    public ProvideIcarerServiceProvidesAdapter(IcarerModule module) {
      super("com.sjtu.icarer.service.IcarerService", NOT_SINGLETON, "com.sjtu.icarer.IcarerModule", "provideIcarerService");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", IcarerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.sjtu.icarer.service.IcarerService>}.
     */
    @Override
    public com.sjtu.icarer.service.IcarerService get() {
      return module.provideIcarerService(restAdapter.get());
    }
  }

  /**
   * A {@code Binding<com.squareup.otto.Bus>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.squareup.otto.Bus>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideOttoBusProvidesAdapter extends ProvidesBinding<com.squareup.otto.Bus>
      implements Provider<com.squareup.otto.Bus> {
    private final IcarerModule module;

    public ProvideOttoBusProvidesAdapter(IcarerModule module) {
      super("com.squareup.otto.Bus", IS_SINGLETON, "com.sjtu.icarer.IcarerModule", "provideOttoBus");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.squareup.otto.Bus>}.
     */
    @Override
    public com.squareup.otto.Bus get() {
      return module.provideOttoBus();
    }
  }

  /**
   * A {@code Binding<com.sjtu.icarer.core.web.RestAdapterRequestInterceptor>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.sjtu.icarer.core.web.RestAdapterRequestInterceptor} and its
   * dependencies.
   *
   * Being a {@code Provider<com.sjtu.icarer.core.web.RestAdapterRequestInterceptor>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestAdapterRequestInterceptorProvidesAdapter extends ProvidesBinding<com.sjtu.icarer.core.web.RestAdapterRequestInterceptor>
      implements Provider<com.sjtu.icarer.core.web.RestAdapterRequestInterceptor> {
    private final IcarerModule module;
    private Binding<com.sjtu.icarer.core.app.UserAgentProvider> userAgentProvider;

    public ProvideRestAdapterRequestInterceptorProvidesAdapter(IcarerModule module) {
      super("com.sjtu.icarer.core.web.RestAdapterRequestInterceptor", NOT_SINGLETON, "com.sjtu.icarer.IcarerModule", "provideRestAdapterRequestInterceptor");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      userAgentProvider = (Binding<com.sjtu.icarer.core.app.UserAgentProvider>) linker.requestBinding("com.sjtu.icarer.core.app.UserAgentProvider", IcarerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(userAgentProvider);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.sjtu.icarer.core.web.RestAdapterRequestInterceptor>}.
     */
    @Override
    public com.sjtu.icarer.core.web.RestAdapterRequestInterceptor get() {
      return module.provideRestAdapterRequestInterceptor(userAgentProvider.get());
    }
  }

  /**
   * A {@code Binding<com.google.gson.Gson>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.google.gson.Gson>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideGsonProvidesAdapter extends ProvidesBinding<com.google.gson.Gson>
      implements Provider<com.google.gson.Gson> {
    private final IcarerModule module;

    public ProvideGsonProvidesAdapter(IcarerModule module) {
      super("com.google.gson.Gson", NOT_SINGLETON, "com.sjtu.icarer.IcarerModule", "provideGson");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.google.gson.Gson>}.
     */
    @Override
    public com.google.gson.Gson get() {
      return module.provideGson();
    }
  }

  /**
   * A {@code Binding<com.sjtu.icarer.core.web.RestErrorHandler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.sjtu.icarer.core.web.RestErrorHandler} and its
   * dependencies.
   *
   * Being a {@code Provider<com.sjtu.icarer.core.web.RestErrorHandler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestErrorHandlerProvidesAdapter extends ProvidesBinding<com.sjtu.icarer.core.web.RestErrorHandler>
      implements Provider<com.sjtu.icarer.core.web.RestErrorHandler> {
    private final IcarerModule module;
    private Binding<com.squareup.otto.Bus> bus;

    public ProvideRestErrorHandlerProvidesAdapter(IcarerModule module) {
      super("com.sjtu.icarer.core.web.RestErrorHandler", NOT_SINGLETON, "com.sjtu.icarer.IcarerModule", "provideRestErrorHandler");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      bus = (Binding<com.squareup.otto.Bus>) linker.requestBinding("com.squareup.otto.Bus", IcarerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(bus);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.sjtu.icarer.core.web.RestErrorHandler>}.
     */
    @Override
    public com.sjtu.icarer.core.web.RestErrorHandler get() {
      return module.provideRestErrorHandler(bus.get());
    }
  }

  /**
   * A {@code Binding<retrofit.RestAdapter>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code retrofit.RestAdapter} and its
   * dependencies.
   *
   * Being a {@code Provider<retrofit.RestAdapter>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestAdapterProvidesAdapter extends ProvidesBinding<retrofit.RestAdapter>
      implements Provider<retrofit.RestAdapter> {
    private final IcarerModule module;
    private Binding<com.sjtu.icarer.core.web.RestErrorHandler> restErrorHandler;
    private Binding<com.sjtu.icarer.core.web.RestAdapterRequestInterceptor> restRequestInterceptor;
    private Binding<com.google.gson.Gson> gson;

    public ProvideRestAdapterProvidesAdapter(IcarerModule module) {
      super("retrofit.RestAdapter", NOT_SINGLETON, "com.sjtu.icarer.IcarerModule", "provideRestAdapter");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restErrorHandler = (Binding<com.sjtu.icarer.core.web.RestErrorHandler>) linker.requestBinding("com.sjtu.icarer.core.web.RestErrorHandler", IcarerModule.class, getClass().getClassLoader());
      restRequestInterceptor = (Binding<com.sjtu.icarer.core.web.RestAdapterRequestInterceptor>) linker.requestBinding("com.sjtu.icarer.core.web.RestAdapterRequestInterceptor", IcarerModule.class, getClass().getClassLoader());
      gson = (Binding<com.google.gson.Gson>) linker.requestBinding("com.google.gson.Gson", IcarerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restErrorHandler);
      getBindings.add(restRequestInterceptor);
      getBindings.add(gson);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<retrofit.RestAdapter>}.
     */
    @Override
    public retrofit.RestAdapter get() {
      return module.provideRestAdapter(restErrorHandler.get(), restRequestInterceptor.get(), gson.get());
    }
  }
}
